//学习地址
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

1、创建版本库
//初始化一个仓库
$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit

$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/

//添加一个文件
$ git add readme.txt
$ git commit -m "wrote a readme file"


2、查看仓库当前的状态  $ git status
3、查看一个文件修改的内容   $ git diff readme.txt

	$ git diff readme.txt 
diff --git a/readme.txt b/readme.txt
index 46d49bf..9247db6 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,2 +1,2 @@
-Git is a version control system.
+Git is a distributed version control system.
 Git is free software.


4、查看历史记录：  $ git log
$ git log --pretty=oneline   如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
5、版本回退 
 	$ git reset --hard HEAD^  (由高版本回退到上一个版本)
	$ git reset --hard 3628164（commit id） 当从低版本想返回到高版本（必须得找到那个版本的commit id） 
	git reflog  ：：Git提供了一个命令git reflog用来记录你的每一次命令
6、查看文件 $ cat readme.txt
7、撤销修改
$ git reset HEAD readme.txt   用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：

$ git checkout -- readme.txt 丢弃工作区的修改

8、删除文件
	当把文件提交到master后  手动删除本地文件 git status显示删除了本地文件 
	1.如果是误删 想恢复 $ git checkout -- test.txt
	2.如果真想删掉  $ git rm test.txt

9.搭建远程仓库
$ ssh-keygen -t rsa -C "youremail@example.com"  
	第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，

打开Shell（Windows下打开Git Bash），创建SSH Key：
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：


要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；//git remote add origin git@github.com:zcp0505/learngit.git

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

10 .从远程库克隆

$ git clone git@github.com:michaelliao/gitskills.git

11. 创建并合并分支

首先，我们创建dev分支，然后切换到dev分支：

$ git checkout -b dev
Switched to a new branch 'dev'
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

$ git branch dev
$ git checkout dev
Switched to branch 'dev'
然后，用git branch命令查看当前分支：

$ git branch
* dev
  master
git branch命令会列出所有分支，当前分支前面会标一个*号。

然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：

Creating a new branch is quick.
然后提交：

$ git add readme.txt 
$ git commit -m "branch test"
[dev fec145a] branch test
 1 file changed, 1 insertion(+)
现在，dev分支的工作完成，我们就可以切换回master分支：

$ git checkout master
Switched to branch 'master'
切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：

现在，我们把dev分支的工作成果合并到master分支上：

$ git merge dev
Updating d17efd8..fec145a
Fast-forward
 readme.txt |    1 +
 1 file changed, 1 insertion(+)


//删除分支
$ git branch -d dev
Deleted branch dev (was fec145a).


Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

11.解决冲突  用git log --graph命令可以看到分支合并图。

12.修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

13.开发一个新feature，最好新建一个分支；

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。eg:git branch -D feature-vulcan

